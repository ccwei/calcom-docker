# This is a basic workflow to help you get started with Actions

name: Build image

# Controls when the workflow will run
on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  # update on run of Update Calendso nightly submodule update
  workflow_run:
    workflows: ["Update Calendso"]
    branches: [main]
    types:
      - completed
  # Allow running workflow manually from the Actions tab
  workflow_dispatch:
    # Uncomment below to allow specific version workflow run
    # inputs:
    #   version:
    #     description: 'Version to build'
    #     required: true

permissions:
  id-token: write
  contents: read

env:
  PROJECT_ID: "glowing-program-446110-a1"
  REGION: "asia-east1"
  SERVICE: "calcom"
  WORKLOAD_IDENTITY_PROVIDER: "projects/321630787341/locations/global/workloadIdentityPools/github/providers/my-repo"
  DOCKER_TAG: "asia-east1-docker.pkg.dev/glowing-program-446110-a1/cloud-run-source-deploy/calcom:latest"

# Leaving in example for releases. Initially we simply push to 'latest'
# on:
# release:
# types: [ created ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # Free about 4.5 GB, elminating our disk space issues
          tool-cache: true

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it, uncomment below
      # - name: Checkout code at specified version
      #   uses: actions/checkout@v2
      #   with:
      #     ref: ${{ github.event.inputs.version }}
      - name: checkout
        uses: actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2" # google-github-actions/auth@v2
        with:
          workload_identity_provider: "${{ env.WORKLOAD_IDENTITY_PROVIDER }}"

      - name: Git submodule update
        run: |
          git submodule update --init

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            asia-east1-docker.pkg.dev/glowing-program-446110-a1/cloud-run-source-deploy/calcom
          # Add flavor latest only on full releases, not on pre-releases
          flavor: |
            latest=${{ !github.event.release.prerelease }}

      - name: Copy env
        run: |
          grep -o '^[^#]*' .env.example > .env
          cat .env >> $GITHUB_ENV
          echo "DATABASE_HOST=localhost:5432" >> $GITHUB_ENV
          eval $(sed -e '/^#/d' -e 's/^/export /' -e 's/$/;/' .env) ;

      # Temporarily disable ARM build due to runner performance issues
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      - name: Start database
        run: |
          docker compose up -d database

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=container:database
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
      #           config-inline: |
      #             [worker.oci]
      #               max-parallelism = 1

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          load: true # Load the image into the Docker daemon
          push: false # Do not push the image at this stage
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_WEBAPP_URL=${{ env.NEXT_PUBLIC_WEBAPP_URL }}
            NEXT_PUBLIC_API_V2_URL=${{ env.NEXT_PUBLIC_API_V2_URL }}
            NEXT_PUBLIC_LICENSE_CONSENT=${{ env.NEXT_PUBLIC_LICENSE_CONSENT }}
            NEXT_PUBLIC_TELEMETRY_KEY=${{ env.NEXT_PUBLIC_TELEMETRY_KEY }}
            DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}
            DATABASE_DIRECT_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.DATABASE_HOST }}/${{ env.POSTGRES_DB }}

      - name: Test runtime
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          IFS=',' read -ra ADDR <<< "$tags"  # Convert string to array using ',' as delimiter
          tag=${ADDR[0]}  # Get the first tag

          docker run --rm --network stack \
            -p 3000:3000 \
            -e DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@database/${{ env.POSTGRES_DB }} \
            -e DATABASE_DIRECT_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@database/${{ env.POSTGRES_DB }} \
            -e NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }} \
            -e CALENDSO_ENCRYPTION_KEY=${{ env.CALENDSO_ENCRYPTION_KEY }} \
            $tag &

            server_pid=$!


            echo "Waiting for the server to start..."
            sleep 120

            echo ${{ env.NEXT_PUBLIC_WEBAPP_URL }}/auth/login

            for i in {1..60}; do
              echo "Checking server health ($i/60)..."
              response=$(curl -o /dev/null -s -w "%{http_code}" ${{ env.NEXT_PUBLIC_WEBAPP_URL }}/auth/login)
              echo "HTTP Status Code: $response"
              if [[ "$response" == "200" ]] || [[ "$response" == "307" ]]; then
                echo "Server is healthy"
                # Now, shutdown the server
                kill $server_pid
                exit 0
              fi
              sleep 1
            done

            echo "Server health check failed"
            kill $server_pid
            exit 1
        env:
          NEXTAUTH_SECRET: "EI4qqDpcfdvf4A+0aQEEx8JjHxHSy4uWiZw/F32K+pA="
          CALENDSO_ENCRYPTION_KEY: "0zfLtY99wjeLnsM7qsa8xsT+Q0oSgnOL"

      - name: "Push Container"
        run: |-
          docker push "${{ env.DOCKER_TAG }}"
      - name: "Deploy to Cloud Run"
        # END - Docker auth and build

        uses: "google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17" # google-github-actions/deploy-cloudrun@v2
        with:
          service: "${{ env.SERVICE }}"
          region: "${{ env.REGION }}"
          # NOTE: If using a pre-built image, update the image name below:

          image: "${{ env.DOCKER_TAG }}"
      # If required, use the Cloud Run URL output in later steps
      - name: "Show output"
        run: |2-

          echo ${{ steps.deploy.outputs.url }}
